<?php

/**
 *Implements hook_menu
 */
function decision_tree_menu() {

  $items = array();

  $items['callback/%/%node'] = array(
    'page callback' => 'decision_tree_ajax_callback',
    'access arguments' => array('access content'),
    'title' => 'Desicion tree ajax callback',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'delivery callback' => 'ajax_deliver'
    );

    return $items;
}

/**
 * Implements hook_permission
 */
function decision_tree_permission() {
  return array(
    'see the outline button' => array(
      'title' => t('To see the outline button'),
      'description' => t('To see the outline button on the book pages'),
    ),
  );

}

/**
 * Implements hook_node_info()
 */
function decision_tree_node_info() {
  return array(
    'decision_tree' => array(
      'name' => t('Decision Tree'),
      'base' => 'decision_tree',
      'description' => t('Content type for Decision Tree'),
      'has_title' => TRUE,
      'title_label' => t('Long title'),
      'locked' => TRUE,
      )
    );
}

/**
 * Implements hook_preprocess_node().
 */
function decision_tree_preprocess_node(&$variables) {

  $variables['theme_hook_suggestions'][] = 'node__' . $variables['type'];

}

/**
 * Implement hook_form()
 */
function decision_tree_form($node, $form_state) {

  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_view
 */
function decision_tree_node_view($node, $view_mode) {
  if ($view_mode == 'full') {
    if (isset($node->book)) {

      $link = $node->book['mlid'];
      $parent = $node->book['plid'];

      /*backbutton*/
      if (!empty($parent)) {
        $p_link = menu_link_load($parent);
        $back_path = str_replace('node', 'callback/' . $view_mode, $p_link['link_path']) . '/nojs';
        $backbutton = '<div class = "backbutton-wrap">' . l('<span class = "glyphicon glyphicon-backward"></span>', $back_path, array('attributes' => array('class' => array('use-ajax')), 'html' => TRUE)) . '</div>';

        $node -> content['back'] = array('#markup' => $backbutton);
      }

      /*children*/
      if ($node->book['has_children'] == 1) {

        $l_load = menu_link_load($link);
        $children = decision_tree_get_menu_link_children($node->book['mlid']);

        foreach ($children as $mlid => $link_path) {
          $tree_path = str_replace('node', 'callback/' . $view_mode, $link_path);
          $tree_path = $tree_path . '/nojs';
          $child = menu_get_object('node', 1, $link_path);
          $field = field_get_items('node', $child, 'field_dtree_button_title');
          $output = drupal_render(field_view_value('node', $child, 'field_dtree_button_title', $field[0]));

          $l_params = array(
            'attributes' => array(
              'class' => array('use-ajax'),
            ),
            'html' => TRUE,
          );

          $button = '<div class = "bwrop col-xs-12 col-sm-6 col-md-4 col-lg-4 well">' . l($output, $tree_path, $l_params) . '</div>';
          $node -> content['button']['#prefix'] = '<div class = "book-buttons container-fluid">';
          $node -> content['button']['#suffix'] = '</div>';
          $node -> content['button']['#weight'] = 99;
          $node->content['button'][] = array('#markup' => $button);
         }
       }

      $links = array();
      $child_type = variable_get('book_child_type', 'book');

      if ((user_access('add content to books') || user_access('administer book outlines')) && node_access('create', $child_type) && $node->status == 1 && $node->book['depth'] < MENU_MAX_DEPTH) {
        $links['book_add_child'] = array(
          'title' => t('Add child page'),
          'href' => 'node/add/' . str_replace('_', '-', $child_type),
          'query' => array('parent' => $node->book['mlid']),
        );
       }

      if (user_access('access printer-friendly version')) {
        $links['book_printer'] = array(
          'title' => t('Printer-friendly version'),
          'href' => 'book/export/html/' . $node->nid,
          'attributes' => array('title' => t('Show a printer-friendly version of this book page and its sub-pages.'))
        );
      }

      if (!empty($links)) {
        $node->content['links']['book'] = array(
          '#theme' => 'links__node__book',
          '#links' => $links,
          '#attributes' => array('class' => array('links', 'inline')),
        );
      }

      $breadcrumb = decision_tree_get_breadcrumb($link, $view_mode);
      drupal_set_breadcrumb($breadcrumb);

      drupal_add_css(drupal_get_path('module', 'decision_tree') . '/css/dt-style.css');
      drupal_add_library('system', 'drupal.ajax');

      if (user_access('see the outline button')) {
        drupal_add_js(drupal_get_path('module', 'decision_tree') . '/js/dt-script.js');
      }
    }
  }
}

/**
 * Get breadcrumbs for particular menu link
 * @param int $mlid
 * The menu link id
 * @param sring $view_mode
 * The view mode of a node. ('full', 'decision_tree', 'teaser', etc)
 * @return array of the rendered links
 */
function decision_tree_get_breadcrumb($mlid, $view_mode) {

  $view_mode = $view_mode;
  $br_links = decision_tree_build_breadcrumb($mlid, $view_mode);
  $breadcrumb [] = l(t('Home'), NULL);
  $breadcrumb = array_merge($breadcrumb, $br_links);

  return $breadcrumb;
}

/**
 * Get the menu link children
 * @param int $plid
 * Integer menu link id for which wee need to get children links.
 * @return array
 * The array with links ids as keys and links pathes as values
 */
function decision_tree_get_menu_link_children($plid) {

  $children = db_select('menu_links') -> condition('plid', $plid) -> fields('menu_links', array('mlid', 'link_path')) -> execute() -> fetchAllKeyed(0, 1);

  return $children;
}

/**
* Get the parent for particular menu link
* @param int $mlid
* The menu link id for which wee need the parent
* @return int
* The parent menu link id
*/
function decision_tree_get_parent($mlid) {
  $parent = db_select('menu_links') -> condition('mlid', $mlid) -> fields('menu_links', array('plid')) -> execute() -> fetchField(0, 1);

  return $parent;
}


/**
 * Builds the beadcrumb array for particular menu link. Without homepage link
 * @param $mlid Integer menu link id
 * @param $view_mode The view mode of a node. ('full', 'decision_tree', 'teaser', etc)
 * @return array of rendered links
 */
function decision_tree_build_breadcrumb($mlid, $view_mode) {

  $root = $mlid;
  $breadcrumb = &drupal_static(__FUNCTION__);

  if(!isset($breadcrumb)){

    $parents = array();
    $parents[$mlid] = $mlid;

    while($parent = decision_tree_get_parent($mlid)){
      $mlid = $parent;
      $parents[$mlid] = $mlid;

    }


    $parent_links = db_select('menu_links') -> condition('mlid', $parents, 'IN') -> fields('menu_links', array('mlid', 'link_path')) -> execute() -> fetchAllKeyed(0, 1);

    $nids = array();

    foreach($parent_links as $link_id => $path){
       $nid = preg_replace('/\D/', '', $path);
       $nids[] = $nid;
    }

    $parent_nodes = node_load_multiple($nids);
    $breadcrumb = array();
    $current_theme = variable_get('theme_default','none');

    $b_set = (($current_theme == 'bootstrap') && (function_exists('bootstrap_setting'))) ? bootstrap_setting('breadcrumb_title') : FALSE;

    foreach($parent_nodes as $node){

      $field = field_get_items('node', $node, 'field_dtree_breadcrumb');
      $output = drupal_render(field_view_value('node', $node, 'field_dtree_breadcrumb', $field[0]));
      if($node->book['mlid'] != $root){
        $breadcrumb[] = $view_mode != 'decision_tree' ? l($output, 'node/' . $node->nid) : l($output, 'tree/' . $node->nid);
      }
      elseif(($current_theme != 'bootstrap') || (!$b_set) || (arg(0) == 'callback')){
        $breadcrumb[] = $output;
      }
    }
  }

  return $breadcrumb;
}


/**
 * Ajax callback for transferring between the book nodes
 */
function decision_tree_ajax_callback($node, $mode = NULL) {

 $view_mode = arg(1);
if ($mode != 'ajax') {

    if($view_mode == 'decision_tree'){
      drupal_goto('tree/' . $node->nid);
    }
    else{
      drupal_goto('node/' . $node->nid);
    }
  }

  $n_view = drupal_render(node_view($node, $view_mode));
  $commands[] = ajax_command_html('#ar-wropper', $n_view);

  $breadcrumb = decision_tree_get_breadcrumb($node->book['mlid'], $view_mode);
  $b_out = '<ol class = "breadcrumb">';
  foreach($breadcrumb as $crumb) {
    $b_out .= '<li>' . $crumb . '</li>';
  }
  $b_out .= '</ol>';

  $commands[] = ajax_command_remove('.breadcrumb');
  $commands[] = ajax_command_before('#main-content', $b_out);
  $commands[] = ajax_command_html('h1.page-header', $node->title);

  if ($view_mode == 'full') {
    $commands[] = ajax_command_remove('ul.tabs--primary');
    $tabs = decision_tree_get_tabs($node->nid);
    $tabs_out = '<ul class = "tabs--primary nav nav-tabs">';

    foreach ($tabs['tabs']['output'] as $tab) {
      $tabs_out .= drupal_render($tab);
    }
    $tabs_out .= '</ul>';
    $commands[] = ajax_command_before('.region.region-content', $tabs_out);
  }

  return array(
    '#type' => 'ajax',
    '#commands' => $commands,
  );
}


/**
 * Gets links of local tasks for page with particular node. We use it for ajax callback
 * @param integer $nid
 * The nid of the node we want to get local tasks for.
 *
 * @return array
 * The array of tabs ready for render.
 *
 * @see menu_local_tasks
 * @see decision_tree_ajax_callback
 */
function decision_tree_get_tabs($nid) {

  $router_item = menu_get_item('node/' . $nid);

  $level = 0;
   $empty = array(
    'tabs' => array('count' => 0, 'output' => array()),
    'actions' => array('count' => 0, 'output' => array()),
    'root_path' => &$root_path,
  );

   // If this router item points to its parent, start from the parents to
    // compute tabs and actions.
    if ($router_item && ($router_item['type'] & MENU_LINKS_TO_PARENT)) {
      $router_item = menu_get_item($router_item['tab_parent_href']);
    }

    // If we failed to fetch a router item or the current user doesn't have
    // access to it, don't bother computing the tabs.
    if (!$router_item || !$router_item['access']) {
      return $empty;
    }


    // Get all tabs (also known as local tasks) and the root page.
    $cid = 'local_tasks:' . $router_item['tab_root'];
    if ($cache = cache_get($cid, 'cache_menu')) {
      $result = $cache->data;
    }
    else {
      $result = db_select('menu_router', NULL, array('fetch' => PDO::FETCH_ASSOC))
        ->fields('menu_router')
        ->condition('tab_root', $router_item['tab_root'])
        ->condition('context', MENU_CONTEXT_INLINE, '<>')
        ->orderBy('weight')
        ->orderBy('title')
        ->execute()
        ->fetchAll();
      cache_set($cid, $result, 'cache_menu');
    }
    $map = $router_item['original_map'];
    $children = array();
    $tasks = array();
    $root_path = $router_item['path'];

    foreach ($result as $item) {
      _menu_translate($item, $map, TRUE);
      if ($item['tab_parent']) {
        // All tabs, but not the root page.
        $children[$item['tab_parent']][$item['path']] = $item;
      }
      // Store the translated item for later use.
      $tasks[$item['path']] = $item;
    }

    // Find all tabs below the current path.
    $path = $router_item['path'];
    // Tab parenting may skip levels, so the number of parts in the path may not
    // equal the depth. Thus we use the $depth counter (offset by 1000 for ksort).
    $depth = 1001;
    $actions['count'] = 0;
    $actions['output'] = array();
    while (isset($children[$path])) {
      $tabs_current = array();
      $actions_current = array();
      $next_path = '';
      $tab_count = 0;
      $action_count = 0;
      foreach ($children[$path] as $item) {
        // Local tasks can be normal items too, so bitmask with
        // MENU_IS_LOCAL_TASK before checking.
        if (!($item['type'] & MENU_IS_LOCAL_TASK)) {
          // This item is not a tab, skip it.
          continue;
        }
        if ($item['access']) {
          $link = $item;
          // The default task is always active. As tabs can be normal items
          // too, so bitmask with MENU_LINKS_TO_PARENT before checking.
          if (($item['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT) {
            // Find the first parent which is not a default local task or action.
            for ($p = $item['tab_parent']; ($tasks[$p]['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT; $p = $tasks[$p]['tab_parent']);
            // Use the path of the parent instead.
            $link['href'] = $tasks[$p]['href'];
            // Mark the link as active, if the current path happens to be the
            // path of the default local task itself (i.e., instead of its
            // tab_parent_href or tab_root_href). Normally, links for default
            // local tasks link to their parent, but the path of default local
            // tasks can still be accessed directly, in which case this link
            // would not be marked as active, since l() only compares the href
            // with $_GET['q'].
            if ($link['href'] != $_GET['q']) {
              $link['localized_options']['attributes']['class'][] = 'active';
            }
            $tabs_current[] = array(
              '#theme' => 'menu_local_task',
              '#link' => $link,
              '#active' => TRUE,
            );
            $next_path = $item['path'];
            $tab_count++;
          }
          else {
            // Actions can be normal items too, so bitmask with
            // MENU_IS_LOCAL_ACTION before checking.
            if (($item['type'] & MENU_IS_LOCAL_ACTION) == MENU_IS_LOCAL_ACTION) {
              // The item is an action, display it as such.
              $actions_current[] = array(
                '#theme' => 'menu_local_action',
                '#link' => $link,
              );
              $action_count++;
            }
            else {
              // Otherwise, it's a normal tab.
              $tabs_current[] = array(
                '#theme' => 'menu_local_task',
                '#link' => $link,
              );
              $tab_count++;
            }
          }
        }
      }
      $path = $next_path;
      $tabs[$depth]['count'] = $tab_count;
      $tabs[$depth]['output'] = $tabs_current;
      $actions['count'] += $action_count;
      $actions['output'] = array_merge($actions['output'], $actions_current);
      $depth++;
    }
    $data['actions'] = $actions;
    // Find all tabs at the same level or above the current one.
    $parent = $router_item['tab_parent'];
    $path = $router_item['path'];
    $current = $router_item;
    $depth = 1000;
    while (isset($children[$parent])) {
      $tabs_current = array();
      $next_path = '';
      $next_parent = '';
      $count = 0;
      foreach ($children[$parent] as $item) {
        // Skip local actions.
        if ($item['type'] & MENU_IS_LOCAL_ACTION) {
          continue;
        }
        if ($item['access']) {
          $count++;
          $link = $item;
          // Local tasks can be normal items too, so bitmask with
          // MENU_LINKS_TO_PARENT before checking.
          if (($item['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT) {
            // Find the first parent which is not a default local task.
            for ($p = $item['tab_parent']; ($tasks[$p]['type'] & MENU_LINKS_TO_PARENT) == MENU_LINKS_TO_PARENT; $p = $tasks[$p]['tab_parent']);
            // Use the path of the parent instead.
            $link['href'] = $tasks[$p]['href'];
            if ($item['path'] == $router_item['path']) {
              $root_path = $tasks[$p]['path'];
            }
          }
          // We check for the active tab.
          if ($item['path'] == $path) {
            // Mark the link as active, if the current path is a (second-level)
            // local task of a default local task. Since this default local task
            // links to its parent, l() will not mark it as active, as it only
            // compares the link's href to $_GET['q'].
            if ($link['href'] != $_GET['q']) {
              $link['localized_options']['attributes']['class'][] = 'active';
            }
            $tabs_current[] = array(
              '#theme' => 'menu_local_task',
              '#link' => $link,
              '#active' => TRUE,
            );
            $next_path = $item['tab_parent'];
            if (isset($tasks[$next_path])) {
              $next_parent = $tasks[$next_path]['tab_parent'];
            }
          }
          else {
            $tabs_current[] = array(
              '#theme' => 'menu_local_task',
              '#link' => $link,
            );
          }
        }
      }
      $path = $next_path;
      $parent = $next_parent;
      $tabs[$depth]['count'] = $count;
      $tabs[$depth]['output'] = $tabs_current;
      $depth--;
    }
    // Sort by depth.
    ksort($tabs);
    // Remove the depth, we are interested only in their relative placement.
    $tabs = array_values($tabs);
    $data['tabs'] = $tabs;

    // Allow modules to alter local tasks or dynamically append further tasks.
    drupal_alter('menu_local_tasks', $data, $router_item, $root_path);


  if (isset($data['tabs'][$level])) {
    return array(
      'tabs' => $data['tabs'][$level],
      'actions' => $data['actions'],
      'root_path' => $root_path,
    );
  }
  // @todo If there are no tabs, then there still can be actions; for example,
  //   when added via hook_menu_local_tasks_alter().
  elseif (!empty($data['actions']['output'])) {
    return array('actions' => $data['actions']) + $empty;
  }
  return $empty;
}

/**
 * Implements hook_theme_registry_alter().
 */
function decision_tree_theme_registry_alter(&$theme_registry) {

  $module_path = drupal_get_path('module', 'decision_tree');

  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  foreach ($template_file_objects as $key => $template_file_object) {
        // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
            // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
      }
    }
}

/**
 * Implements hook_preprocess_page
 */
function decision_tree_preprocess_page(&$variables) {

  if (isset($variables['node'])) {
    $variables['title'] = $variables['node']->title;
  }
}
